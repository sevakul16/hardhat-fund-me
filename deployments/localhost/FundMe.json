{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FundMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAddressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunder",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d1b2fc813ab5d2ab74aa7ee508a013214bf99974a985ebf4ffc9142bbafd962",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1043015",
    "logsBloom": "0x
    "blockHash": "0x6c28cf195da00aaa820a2dccc2f10ab012e43649128da8041f17fb1860a322f1",
    "transactionHash": "0x2d1b2fc813ab5d2ab74aa7ee508a013214bf99974a985ebf4ffc9142bbafd962",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1043015",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "63a17bb0d512fcee29c7678a5884e7b4",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FundMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAddressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunder\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Vsevolod Kulev\",\"details\":\"This implements price feeds as our libary\",\"kind\":\"dev\",\"methods\":{\"fund()\":{\"details\":\"This implements price feeds as our libary\"}},\"title\":\"Acontract for crown fundting\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"fund()\":{\"notice\":\"This function funds this contract\"}},\"notice\":\"This contract is to demo a sample funding contract\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0x6e6e4b0835904509406b070ee173b5bc8f677c19421b76be38aea3b1b3d30846\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FundMe__NotOwner();\\n\\n/// @title Acontract for crown fundting\\n/// @author Vsevolod Kulev\\n/// @notice This contract is to demo a sample funding contract\\n/// @dev This implements price feeds as our libary\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    address[] private s_funders;\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n\\n    address private immutable i_owner; //immutable set only once, butr not at the declaration moment\\n    uint256 public constant MINIMUM_USD = 50 * 1e18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    //modifier can be added to function declaration to add executable code before function\\n    modifier onlyOwner() {\\n        //require(msg.sender == i_owner, \\\"Sender is not owner\\\");\\n        if (msg.sender != i_owner) {\\n            revert FundMe__NotOwner();\\n        } //revert() does same thing as required but\\n        _; //_ represents all the rest code\\n    }\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    //receive() if money is sent, but no specific function called\\n    // receive() external payable {\\n    //     fund();\\n    // }\\n\\n    //fallback() if money is sent, but no called function exists fallback is called\\n    // fallback() external payable {\\n    //     fund();\\n    // }\\n\\n    /// @notice This function funds this contract\\n    /// @dev This implements price feeds as our libary\\n    function fund() public payable {\\n        //Want to be able to set a minimum amount of fund amount in USD\\n        //How to get ETH to this contract\\n        require(\\n            msg.value.getConversionRate(s_priceFeed) >= MINIMUM_USD,\\n            \\\"Not enough ETH sent\\\"\\n        ); //1e18 == 1* 10^18\\n        //18 decimals\\n        s_funders.push(msg.sender);\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n    }\\n\\n    function withdraw() public onlyOwner {\\n        //Removed funds from s_addressToAmountFunded mapping\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        //Clear s_funders array\\n        s_funders = new address[](0);\\n        //Withdraw the funds\\n        //call\\n        (\\n            bool callSuccess, /*bytes memory dataReturned*/\\n\\n        ) = payable(msg.sender).call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner {\\n        address[] memory funders = s_funders;\\n        //mappings cant be i memory\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool callSuccess, ) = i_owner.call{value: address(this).balance}(\\\"\\\");\\n        require(callSuccess, \\\"Call failed\\\");\\n    }\\n\\n    function getOwner() public view returns (address) {\\n        return i_owner;\\n    }\\n\\n    function getFunder(uint256 index) public view returns (address) {\\n        return s_funders[index];\\n    }\\n\\n    function getAddressToAmountFunded(address funder)\\n        public\\n        view\\n        returns (uint256)\\n    {\\n        return s_addressToAmountFunded[funder];\\n    }\\n\\n    function getPriceFeed() public view returns (AggregatorV3Interface) {\\n        return s_priceFeed;\\n    }\\n\\n    //Chainlink external operations in decentralized context\\n    //Chainlink data feeds - for getting data from the real world\\n    //Chainlink VRF - random number from the real world\\n    //Chainlink keepers - event driven computations. E.g. if something happens do something\\n    //Chainlink to any API - ultimate customization of chainlink. E.g using APIs\\n}\\n\",\"keccak256\":\"0xa74f28254d7d1f83ddd70a5619411dffb5e3f703586507dcbdd9ea8c24ad3949\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\nlibrary PriceConverter {\\n    function getPrice(AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        (, int256 price, , , ) = priceFeed.latestRoundData();\\n        //ETH in terms of USD\\n\\n        return uint256(price * 1e10);\\n    }\\n\\n    function getVersion() internal view returns (uint256) {\\n        AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n            0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\\n        );\\n        return priceFeed.version();\\n    }\\n\\n    function getConversionRate(\\n        uint256 ethAmount,\\n        AggregatorV3Interface priceFeed\\n    ) internal view returns (uint256) {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1e18;\\n        return ethAmountInUsd;\\n    }\\n}\\n\",\"keccak256\":\"0x0f1f0d713051d3f4280692fa21edeab7b83aadc006beb24661e9fb1c65101d9d\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b506040516200130838038062001308833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c61118262000186600039600081816101f101528181610440015281816105cb01526107c101526111826000f3fe60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aba565b6101a6565b6040516100b49190610b00565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610b00565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610b2a565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610ba4565b60405180910390f35b61015d61048e565b005b6101676105c9565b005b34801561017557600080fd5b50610190600480360381019061018b9190610beb565b61088d565b60405161019d9190610b2a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c76565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610cbf565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f9291906109b0565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610d1f565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610d91565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d490919063ffffffff16565b101561050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610dfd565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c09190610e1d565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610687575b5050505050905060005b815181101561075c5760008282815181106106f9576106f8610c18565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610c76565b9150506106db565b50600067ffffffffffffffff81111561077857610777610cbf565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600090805190602001906107bc9291906109b0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080390610d1f565b60006040518083038185875af1925050503d8060008114610840576040519150601f19603f3d011682016040523d82523d6000602084013e610845565b606091505b5050905080610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090610d91565b60405180910390fd5b5050565b60008082815481106108a2576108a1610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e083610910565b90506000670de0b6b3a764000085836108f99190610e73565b6109039190610efc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190610fba565b5050509150506402540be400816109a89190611035565b915050919050565b828054828255906000526020600020908101928215610a29579160200282015b82811115610a285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d0565b5b509050610a369190610a3a565b5090565b5b80821115610a53576000816000905550600101610a3b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8782610a5c565b9050919050565b610a9781610a7c565b8114610aa257600080fd5b50565b600081359050610ab481610a8e565b92915050565b600060208284031215610ad057610acf610a57565b5b6000610ade84828501610aa5565b91505092915050565b6000819050919050565b610afa81610ae7565b82525050565b6000602082019050610b156000830184610af1565b92915050565b610b2481610a7c565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000819050919050565b6000610b6a610b65610b6084610a5c565b610b45565b610a5c565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b610bc881610ae7565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600060208284031215610c0157610c00610a57565b5b6000610c0f84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8182610ae7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610c47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d09600083610cee565b9150610d1482610cf9565b600082019050919050565b6000610d2a82610cfc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d7b600b83610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b7f4e6f7420656e6f756768204554482073656e7400000000000000000000000000600082015250565b6000610de7601383610d34565b9150610df282610db1565b602082019050919050565b60006020820190508181036000830152610e1681610dda565b9050919050565b6000610e2882610ae7565b9150610e3383610ae7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e6857610e67610c47565b5b828201905092915050565b6000610e7e82610ae7565b9150610e8983610ae7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ec257610ec1610c47565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0782610ae7565b9150610f1283610ae7565b925082610f2257610f21610ecd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4c81610f2d565b8114610f5757600080fd5b50565b600081519050610f6981610f43565b92915050565b6000819050919050565b610f8281610f6f565b8114610f8d57600080fd5b50565b600081519050610f9f81610f79565b92915050565b600081519050610fb481610bbf565b92915050565b600080600080600060a08688031215610fd657610fd5610a57565b5b6000610fe488828901610f5a565b9550506020610ff588828901610f90565b945050604061100688828901610fa5565b935050606061101788828901610fa5565b925050608061102888828901610f5a565b9150509295509295909350565b600061104082610f6f565b915061104b83610f6f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108a57611089610c47565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c7576110c6610c47565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110457611103610c47565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114157611140610c47565b5b82820290509291505056fea26469706673582212203d0bfa075b2c4987aa2431af70a564e511f7d8613871d9cdfa6129a5b61936fb64736f6c63430008080033",
  "deployedBytecode": "0x60806040526004361061007b5760003560e01c80639e87a5cd1161004e5780639e87a5cd1461012a578063b60d428814610155578063be2693f01461015f578063d7b4750c146101695761007b565b80630343fb25146100805780633ccfd60b146100bd5780636b69a592146100d4578063893d20e8146100ff575b600080fd5b34801561008c57600080fd5b506100a760048036038101906100a29190610aba565b6101a6565b6040516100b49190610b00565b60405180910390f35b3480156100c957600080fd5b506100d26101ef565b005b3480156100e057600080fd5b506100e961042f565b6040516100f69190610b00565b60405180910390f35b34801561010b57600080fd5b5061011461043c565b6040516101219190610b2a565b60405180910390f35b34801561013657600080fd5b5061013f610464565b60405161014c9190610ba4565b60405180910390f35b61015d61048e565b005b6101676105c9565b005b34801561017557600080fd5b50610190600480360381019061018b9190610beb565b61088d565b60405161019d9190610b2a565b60405180910390f35b6000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610274576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b60008054905081101561031f57600080828154811061029957610298610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061031790610c76565b915050610277565b50600067ffffffffffffffff81111561033b5761033a610cbf565b5b6040519080825280602002602001820160405280156103695781602001602082028036833780820191505090505b506000908051906020019061037f9291906109b0565b5060003373ffffffffffffffffffffffffffffffffffffffff16476040516103a690610d1f565b60006040518083038185875af1925050503d80600081146103e3576040519150601f19603f3d011682016040523d82523d6000602084013e6103e8565b606091505b505090508061042c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161042390610d91565b60405180910390fd5b50565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006104cd600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16346108d490919063ffffffff16565b101561050e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161050590610dfd565b60405180910390fd5b6000339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555034600160003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546105c09190610e1d565b92505081905550565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461064e576040517f579610db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000808054806020026020016040519081016040528092919081815260200182805480156106d157602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610687575b5050505050905060005b815181101561075c5760008282815181106106f9576106f8610c18565b5b602002602001015190506000600160008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061075490610c76565b9150506106db565b50600067ffffffffffffffff81111561077857610777610cbf565b5b6040519080825280602002602001820160405280156107a65781602001602082028036833780820191505090505b50600090805190602001906107bc9291906109b0565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff164760405161080390610d1f565b60006040518083038185875af1925050503d8060008114610840576040519150601f19603f3d011682016040523d82523d6000602084013e610845565b606091505b5050905080610889576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161088090610d91565b60405180910390fd5b5050565b60008082815481106108a2576108a1610c18565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b6000806108e083610910565b90506000670de0b6b3a764000085836108f99190610e73565b6109039190610efc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b15801561095957600080fd5b505afa15801561096d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109919190610fba565b5050509150506402540be400816109a89190611035565b915050919050565b828054828255906000526020600020908101928215610a29579160200282015b82811115610a285782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550916020019190600101906109d0565b5b509050610a369190610a3a565b5090565b5b80821115610a53576000816000905550600101610a3b565b5090565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610a8782610a5c565b9050919050565b610a9781610a7c565b8114610aa257600080fd5b50565b600081359050610ab481610a8e565b92915050565b600060208284031215610ad057610acf610a57565b5b6000610ade84828501610aa5565b91505092915050565b6000819050919050565b610afa81610ae7565b82525050565b6000602082019050610b156000830184610af1565b92915050565b610b2481610a7c565b82525050565b6000602082019050610b3f6000830184610b1b565b92915050565b6000819050919050565b6000610b6a610b65610b6084610a5c565b610b45565b610a5c565b9050919050565b6000610b7c82610b4f565b9050919050565b6000610b8e82610b71565b9050919050565b610b9e81610b83565b82525050565b6000602082019050610bb96000830184610b95565b92915050565b610bc881610ae7565b8114610bd357600080fd5b50565b600081359050610be581610bbf565b92915050565b600060208284031215610c0157610c00610a57565b5b6000610c0f84828501610bd6565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610c8182610ae7565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610cb457610cb3610c47565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610d09600083610cee565b9150610d1482610cf9565b600082019050919050565b6000610d2a82610cfc565b9150819050919050565b600082825260208201905092915050565b7f43616c6c206661696c6564000000000000000000000000000000000000000000600082015250565b6000610d7b600b83610d34565b9150610d8682610d45565b602082019050919050565b60006020820190508181036000830152610daa81610d6e565b9050919050565b7f4e6f7420656e6f756768204554482073656e7400000000000000000000000000600082015250565b6000610de7601383610d34565b9150610df282610db1565b602082019050919050565b60006020820190508181036000830152610e1681610dda565b9050919050565b6000610e2882610ae7565b9150610e3383610ae7565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e6857610e67610c47565b5b828201905092915050565b6000610e7e82610ae7565b9150610e8983610ae7565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610ec257610ec1610c47565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610f0782610ae7565b9150610f1283610ae7565b925082610f2257610f21610ecd565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f4c81610f2d565b8114610f5757600080fd5b50565b600081519050610f6981610f43565b92915050565b6000819050919050565b610f8281610f6f565b8114610f8d57600080fd5b50565b600081519050610f9f81610f79565b92915050565b600081519050610fb481610bbf565b92915050565b600080600080600060a08688031215610fd657610fd5610a57565b5b6000610fe488828901610f5a565b9550506020610ff588828901610f90565b945050604061100688828901610fa5565b935050606061101788828901610fa5565b925050608061102888828901610f5a565b9150509295509295909350565b600061104082610f6f565b915061104b83610f6f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561108a57611089610c47565b5b817f800000000000000000000000000000000000000000000000000000000000000005831260008412600084131616156110c7576110c6610c47565b5b827f8000000000000000000000000000000000000000000000000000000000000000058212600084136000841216161561110457611103610c47565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561114157611140610c47565b5b82820290509291505056fea26469706673582212203d0bfa075b2c4987aa2431af70a564e511f7d8613871d9cdfa6129a5b61936fb64736f6c63430008080033",
  "devdoc": {
    "author": "Vsevolod Kulev",
    "details": "This implements price feeds as our libary",
    "kind": "dev",
    "methods": {
      "fund()": {
        "details": "This implements price feeds as our libary"
      }
    },
    "title": "Acontract for crown fundting",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "fund()": {
        "notice": "This function funds this contract"
      }
    },
    "notice": "This contract is to demo a sample funding contract",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 57,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "0",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 61,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 71,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}